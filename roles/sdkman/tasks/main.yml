---
- name: Install SDKMAN packages
  ansible.builtin.include_role:
    name: Comcast.sdkman
  vars:
    sdkman_auto_answer: true
    sdkman_update: true
    sdkman_install_packages: "{{ sdkman_candidates + sdkman_additional_candidates }}"
    sdkman_defaults: "{{ sdkman_default_candidates }}"
    sdkman_flush_caches_before:
      - temp
    sdkman_flush_caches_after:
      - archives
      - broadcast
      - candidates
      - temp

- name: Remove obsolete SDKMAN packages
  ansible.builtin.shell: |
    set -e
    set -o pipefail

    source $SDKMAN_DIR/bin/sdkman-init.sh

    candidatesVar='{{ (sdkman_candidates + sdkman_additional_candidates) | to_json }}'
    candidates=($(echo $candidatesVar | jq -r '[.[].candidate] | unique | .[]'))
    for candidate in ${candidates[@]}; do
      requiredVersions=($(echo $candidatesVar | jq -r "[.[] | select(.candidate==\"$candidate\") | .version] | unique | .[]"))

      installedVersions=($(find $SDKMAN_DIR/candidates/$candidate -d 1 -type d -exec basename {} \; | tr -s "\n" " "))
      for installedVersion in ${installedVersions[@]}; do
        if [[ ! " ${requiredVersions[*]} " =~ " ${installedVersion} " ]]; then
          echo "Uninstall candidate $candidate version $installedVersion"
          sdk uninstall $candidate $installedVersion
        fi
      done
    done
  register: sdkman_remove_obsolete
  changed_when: >-
    'Uninstall candidate' in sdkman_remove_obsolete.stdout
  failed_when: >-
    sdkman_remove_obsolete.rc != 0
